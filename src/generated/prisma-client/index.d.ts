// Code generated by Prisma (prisma@1.20.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  market: (where?: MarketWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  province: (where?: ProvinceWhereInput) => Promise<boolean>;
  stall: (where?: StallWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  market: (where: MarketWhereUniqueInput) => MarketPromise;
  markets: (
    args?: {
      where?: MarketWhereInput;
      orderBy?: MarketOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Market>;
  marketsConnection: (
    args?: {
      where?: MarketWhereInput;
      orderBy?: MarketOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MarketConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  province: (where: ProvinceWhereUniqueInput) => ProvincePromise;
  provinces: (
    args?: {
      where?: ProvinceWhereInput;
      orderBy?: ProvinceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Province>;
  provincesConnection: (
    args?: {
      where?: ProvinceWhereInput;
      orderBy?: ProvinceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProvinceConnectionPromise;
  stall: (where: StallWhereUniqueInput) => StallPromise;
  stalls: (
    args?: {
      where?: StallWhereInput;
      orderBy?: StallOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Stall>;
  stallsConnection: (
    args?: {
      where?: StallWhereInput;
      orderBy?: StallOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StallConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createMarket: (data: MarketCreateInput) => MarketPromise;
  updateMarket: (
    args: { data: MarketUpdateInput; where: MarketWhereUniqueInput }
  ) => MarketPromise;
  updateManyMarkets: (
    args: { data: MarketUpdateManyMutationInput; where?: MarketWhereInput }
  ) => BatchPayloadPromise;
  upsertMarket: (
    args: {
      where: MarketWhereUniqueInput;
      create: MarketCreateInput;
      update: MarketUpdateInput;
    }
  ) => MarketPromise;
  deleteMarket: (where: MarketWhereUniqueInput) => MarketPromise;
  deleteManyMarkets: (where?: MarketWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createProvince: (data: ProvinceCreateInput) => ProvincePromise;
  updateProvince: (
    args: { data: ProvinceUpdateInput; where: ProvinceWhereUniqueInput }
  ) => ProvincePromise;
  updateManyProvinces: (
    args: { data: ProvinceUpdateManyMutationInput; where?: ProvinceWhereInput }
  ) => BatchPayloadPromise;
  upsertProvince: (
    args: {
      where: ProvinceWhereUniqueInput;
      create: ProvinceCreateInput;
      update: ProvinceUpdateInput;
    }
  ) => ProvincePromise;
  deleteProvince: (where: ProvinceWhereUniqueInput) => ProvincePromise;
  deleteManyProvinces: (where?: ProvinceWhereInput) => BatchPayloadPromise;
  createStall: (data: StallCreateInput) => StallPromise;
  updateStall: (
    args: { data: StallUpdateInput; where: StallWhereUniqueInput }
  ) => StallPromise;
  updateManyStalls: (
    args: { data: StallUpdateManyMutationInput; where?: StallWhereInput }
  ) => BatchPayloadPromise;
  upsertStall: (
    args: {
      where: StallWhereUniqueInput;
      create: StallCreateInput;
      update: StallUpdateInput;
    }
  ) => StallPromise;
  deleteStall: (where: StallWhereUniqueInput) => StallPromise;
  deleteManyStalls: (where?: StallWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  market: (
    where?: MarketSubscriptionWhereInput
  ) => MarketSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  province: (
    where?: ProvinceSubscriptionWhereInput
  ) => ProvinceSubscriptionPayloadSubscription;
  stall: (
    where?: StallSubscriptionWhereInput
  ) => StallSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MarketOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StallOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "lng_ASC"
  | "lng_DESC"
  | "lat_ASC"
  | "lat_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC";

export type ProvinceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateWithoutStallDataInput {
  name?: String;
  email?: String;
  password?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export type MarketWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  stall?: StallWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface StallCreateWithoutMarketsInput {
  lng: String;
  lat: String;
  name?: String;
  description?: String;
  owner: UserCreateOneWithoutStallInput;
}

export interface MarketUpdateManyWithoutStallsInput {
  create?: MarketCreateWithoutStallsInput[] | MarketCreateWithoutStallsInput;
  delete?: MarketWhereUniqueInput[] | MarketWhereUniqueInput;
  connect?: MarketWhereUniqueInput[] | MarketWhereUniqueInput;
  disconnect?: MarketWhereUniqueInput[] | MarketWhereUniqueInput;
  update?:
    | MarketUpdateWithWhereUniqueWithoutStallsInput[]
    | MarketUpdateWithWhereUniqueWithoutStallsInput;
  upsert?:
    | MarketUpsertWithWhereUniqueWithoutStallsInput[]
    | MarketUpsertWithWhereUniqueWithoutStallsInput;
}

export interface UserCreateOneWithoutStallInput {
  create?: UserCreateWithoutStallInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertWithoutStallInput {
  update: UserUpdateWithoutStallDataInput;
  create: UserCreateWithoutStallInput;
}

export interface UserCreateWithoutStallInput {
  name: String;
  email: String;
  password: String;
  posts?: PostCreateManyWithoutAuthorInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface StallSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StallWhereInput;
  AND?: StallSubscriptionWhereInput[] | StallSubscriptionWhereInput;
  OR?: StallSubscriptionWhereInput[] | StallSubscriptionWhereInput;
  NOT?: StallSubscriptionWhereInput[] | StallSubscriptionWhereInput;
}

export interface PostCreateWithoutAuthorInput {
  isPublished?: Boolean;
  title: String;
  content: String;
}

export interface MarketWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  province?: ProvinceWhereInput;
  stalls_every?: StallWhereInput;
  stalls_some?: StallWhereInput;
  stalls_none?: StallWhereInput;
  AND?: MarketWhereInput[] | MarketWhereInput;
  OR?: MarketWhereInput[] | MarketWhereInput;
  NOT?: MarketWhereInput[] | MarketWhereInput;
}

export interface MarketUpdateInput {
  name?: String;
  province?: ProvinceUpdateOneWithoutMarketsInput;
  stalls?: StallUpdateManyWithoutMarketsInput;
}

export interface MarketSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MarketWhereInput;
  AND?: MarketSubscriptionWhereInput[] | MarketSubscriptionWhereInput;
  OR?: MarketSubscriptionWhereInput[] | MarketSubscriptionWhereInput;
  NOT?: MarketSubscriptionWhereInput[] | MarketSubscriptionWhereInput;
}

export interface ProvinceUpdateOneWithoutMarketsInput {
  create?: ProvinceCreateWithoutMarketsInput;
  update?: ProvinceUpdateWithoutMarketsDataInput;
  upsert?: ProvinceUpsertWithoutMarketsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ProvinceWhereUniqueInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  stall?: StallUpdateOneWithoutOwnerInput;
}

export interface ProvinceUpdateWithoutMarketsDataInput {
  name?: String;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ProvinceUpsertWithoutMarketsInput {
  update: ProvinceUpdateWithoutMarketsDataInput;
  create: ProvinceCreateWithoutMarketsInput;
}

export interface StallUpdateInput {
  lng?: String;
  lat?: String;
  name?: String;
  description?: String;
  owner?: UserUpdateOneRequiredWithoutStallInput;
  markets?: MarketUpdateManyWithoutStallsInput;
}

export interface StallUpdateManyWithoutMarketsInput {
  create?: StallCreateWithoutMarketsInput[] | StallCreateWithoutMarketsInput;
  delete?: StallWhereUniqueInput[] | StallWhereUniqueInput;
  connect?: StallWhereUniqueInput[] | StallWhereUniqueInput;
  disconnect?: StallWhereUniqueInput[] | StallWhereUniqueInput;
  update?:
    | StallUpdateWithWhereUniqueWithoutMarketsInput[]
    | StallUpdateWithWhereUniqueWithoutMarketsInput;
  upsert?:
    | StallUpsertWithWhereUniqueWithoutMarketsInput[]
    | StallUpsertWithWhereUniqueWithoutMarketsInput;
}

export type ProvinceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface StallUpdateWithWhereUniqueWithoutMarketsInput {
  where: StallWhereUniqueInput;
  data: StallUpdateWithoutMarketsDataInput;
}

export interface MarketUpsertWithWhereUniqueWithoutProvinceInput {
  where: MarketWhereUniqueInput;
  update: MarketUpdateWithoutProvinceDataInput;
  create: MarketCreateWithoutProvinceInput;
}

export interface StallUpdateWithoutMarketsDataInput {
  lng?: String;
  lat?: String;
  name?: String;
  description?: String;
  owner?: UserUpdateOneRequiredWithoutStallInput;
}

export interface MarketUpdateWithWhereUniqueWithoutProvinceInput {
  where: MarketWhereUniqueInput;
  data: MarketUpdateWithoutProvinceDataInput;
}

export interface UserUpdateOneRequiredWithoutStallInput {
  create?: UserCreateWithoutStallInput;
  update?: UserUpdateWithoutStallDataInput;
  upsert?: UserUpsertWithoutStallInput;
  connect?: UserWhereUniqueInput;
}

export interface MarketUpdateManyWithoutProvinceInput {
  create?:
    | MarketCreateWithoutProvinceInput[]
    | MarketCreateWithoutProvinceInput;
  delete?: MarketWhereUniqueInput[] | MarketWhereUniqueInput;
  connect?: MarketWhereUniqueInput[] | MarketWhereUniqueInput;
  disconnect?: MarketWhereUniqueInput[] | MarketWhereUniqueInput;
  update?:
    | MarketUpdateWithWhereUniqueWithoutProvinceInput[]
    | MarketUpdateWithWhereUniqueWithoutProvinceInput;
  upsert?:
    | MarketUpsertWithWhereUniqueWithoutProvinceInput[]
    | MarketUpsertWithWhereUniqueWithoutProvinceInput;
}

export interface StallUpsertWithoutOwnerInput {
  update: StallUpdateWithoutOwnerDataInput;
  create: StallCreateWithoutOwnerInput;
}

export interface MarketCreateWithoutProvinceInput {
  name: String;
  stalls?: StallCreateManyWithoutMarketsInput;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput;
}

export interface MarketCreateManyWithoutProvinceInput {
  create?:
    | MarketCreateWithoutProvinceInput[]
    | MarketCreateWithoutProvinceInput;
  connect?: MarketWhereUniqueInput[] | MarketWhereUniqueInput;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateManyMutationInput {
  isPublished?: Boolean;
  title?: String;
  content?: String;
}

export interface PostUpdateWithoutAuthorDataInput {
  isPublished?: Boolean;
  title?: String;
  content?: String;
}

export interface ProvinceCreateOneWithoutMarketsInput {
  create?: ProvinceCreateWithoutMarketsInput;
  connect?: ProvinceWhereUniqueInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  author?: UserWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface StallCreateManyWithoutMarketsInput {
  create?: StallCreateWithoutMarketsInput[] | StallCreateWithoutMarketsInput;
  connect?: StallWhereUniqueInput[] | StallWhereUniqueInput;
}

export interface MarketUpsertWithWhereUniqueWithoutStallsInput {
  where: MarketWhereUniqueInput;
  update: MarketUpdateWithoutStallsDataInput;
  create: MarketCreateWithoutStallsInput;
}

export interface ProvinceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  markets_every?: MarketWhereInput;
  markets_some?: MarketWhereInput;
  markets_none?: MarketWhereInput;
  AND?: ProvinceWhereInput[] | ProvinceWhereInput;
  OR?: ProvinceWhereInput[] | ProvinceWhereInput;
  NOT?: ProvinceWhereInput[] | ProvinceWhereInput;
}

export interface StallUpsertWithWhereUniqueWithoutMarketsInput {
  where: StallWhereUniqueInput;
  update: StallUpdateWithoutMarketsDataInput;
  create: StallCreateWithoutMarketsInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface MarketUpdateManyMutationInput {
  name?: String;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
  posts?: PostCreateManyWithoutAuthorInput;
  stall?: StallCreateOneWithoutOwnerInput;
}

export interface MarketUpdateWithoutStallsDataInput {
  name?: String;
  province?: ProvinceUpdateOneWithoutMarketsInput;
}

export interface StallCreateInput {
  lng: String;
  lat: String;
  name?: String;
  description?: String;
  owner: UserCreateOneWithoutStallInput;
  markets?: MarketCreateManyWithoutStallsInput;
}

export interface MarketUpdateWithWhereUniqueWithoutStallsInput {
  where: MarketWhereUniqueInput;
  data: MarketUpdateWithoutStallsDataInput;
}

export interface MarketUpdateWithoutProvinceDataInput {
  name?: String;
  stalls?: StallUpdateManyWithoutMarketsInput;
}

export interface PostCreateInput {
  isPublished?: Boolean;
  title: String;
  content: String;
  author: UserCreateOneWithoutPostsInput;
}

export interface ProvinceUpdateInput {
  name?: String;
  markets?: MarketUpdateManyWithoutProvinceInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface ProvinceCreateInput {
  name: String;
  markets?: MarketCreateManyWithoutProvinceInput;
}

export interface UserCreateWithoutPostsInput {
  name: String;
  email: String;
  password: String;
  stall?: StallCreateOneWithoutOwnerInput;
}

export interface MarketCreateInput {
  name: String;
  province?: ProvinceCreateOneWithoutMarketsInput;
  stalls?: StallCreateManyWithoutMarketsInput;
}

export interface StallCreateOneWithoutOwnerInput {
  create?: StallCreateWithoutOwnerInput;
  connect?: StallWhereUniqueInput;
}

export interface StallWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  lng?: String;
  lng_not?: String;
  lng_in?: String[] | String;
  lng_not_in?: String[] | String;
  lng_lt?: String;
  lng_lte?: String;
  lng_gt?: String;
  lng_gte?: String;
  lng_contains?: String;
  lng_not_contains?: String;
  lng_starts_with?: String;
  lng_not_starts_with?: String;
  lng_ends_with?: String;
  lng_not_ends_with?: String;
  lat?: String;
  lat_not?: String;
  lat_in?: String[] | String;
  lat_not_in?: String[] | String;
  lat_lt?: String;
  lat_lte?: String;
  lat_gt?: String;
  lat_gte?: String;
  lat_contains?: String;
  lat_not_contains?: String;
  lat_starts_with?: String;
  lat_not_starts_with?: String;
  lat_ends_with?: String;
  lat_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  owner?: UserWhereInput;
  markets_every?: MarketWhereInput;
  markets_some?: MarketWhereInput;
  markets_none?: MarketWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: StallWhereInput[] | StallWhereInput;
  OR?: StallWhereInput[] | StallWhereInput;
  NOT?: StallWhereInput[] | StallWhereInput;
}

export interface StallCreateWithoutOwnerInput {
  lng: String;
  lat: String;
  name?: String;
  description?: String;
  markets?: MarketCreateManyWithoutStallsInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
}

export interface MarketCreateManyWithoutStallsInput {
  create?: MarketCreateWithoutStallsInput[] | MarketCreateWithoutStallsInput;
  connect?: MarketWhereUniqueInput[] | MarketWhereUniqueInput;
}

export interface ProvinceUpdateManyMutationInput {
  name?: String;
}

export interface MarketCreateWithoutStallsInput {
  name: String;
  province?: ProvinceCreateOneWithoutMarketsInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface PostUpdateInput {
  isPublished?: Boolean;
  title?: String;
  content?: String;
  author?: UserUpdateOneRequiredWithoutPostsInput;
}

export interface ProvinceCreateWithoutMarketsInput {
  name: String;
}

export interface StallUpdateWithoutOwnerDataInput {
  lng?: String;
  lat?: String;
  name?: String;
  description?: String;
  markets?: MarketUpdateManyWithoutStallsInput;
}

export interface StallUpdateOneWithoutOwnerInput {
  create?: StallCreateWithoutOwnerInput;
  update?: StallUpdateWithoutOwnerDataInput;
  upsert?: StallUpsertWithoutOwnerInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: StallWhereUniqueInput;
}

export interface UserUpdateWithoutPostsDataInput {
  name?: String;
  email?: String;
  password?: String;
  stall?: StallUpdateOneWithoutOwnerInput;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface ProvinceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProvinceWhereInput;
  AND?: ProvinceSubscriptionWhereInput[] | ProvinceSubscriptionWhereInput;
  OR?: ProvinceSubscriptionWhereInput[] | ProvinceSubscriptionWhereInput;
  NOT?: ProvinceSubscriptionWhereInput[] | ProvinceSubscriptionWhereInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export type StallWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface StallUpdateManyMutationInput {
  lng?: String;
  lat?: String;
  name?: String;
  description?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostEdge {
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = Post>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Stall {
  id: ID_Output;
  lng: String;
  lat: String;
  name?: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StallPromise extends Promise<Stall>, Fragmentable {
  id: () => Promise<ID_Output>;
  lng: () => Promise<String>;
  lat: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  owner: <T = User>() => T;
  markets: <T = FragmentableArray<Market>>(
    args?: {
      where?: MarketWhereInput;
      orderBy?: MarketOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StallSubscription
  extends Promise<AsyncIterator<Stall>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lng: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
  markets: <T = Promise<AsyncIterator<MarketSubscription>>>(
    args?: {
      where?: MarketWhereInput;
      orderBy?: MarketOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostConnection {}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePost>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface AggregateMarket {
  count: Int;
}

export interface AggregateMarketPromise
  extends Promise<AggregateMarket>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMarketSubscription
  extends Promise<AsyncIterator<AggregateMarket>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface StallPreviousValues {
  id: ID_Output;
  lng: String;
  lat: String;
  name?: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StallPreviousValuesPromise
  extends Promise<StallPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  lng: () => Promise<String>;
  lat: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StallPreviousValuesSubscription
  extends Promise<AsyncIterator<StallPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lng: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MarketEdge {
  cursor: String;
}

export interface MarketEdgePromise extends Promise<MarketEdge>, Fragmentable {
  node: <T = Market>() => T;
  cursor: () => Promise<String>;
}

export interface MarketEdgeSubscription
  extends Promise<AsyncIterator<MarketEdge>>,
    Fragmentable {
  node: <T = MarketSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface StallSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface StallSubscriptionPayloadPromise
  extends Promise<StallSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Stall>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StallPreviousValues>() => T;
}

export interface StallSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StallSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StallSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StallPreviousValuesSubscription>() => T;
}

export interface MarketConnection {}

export interface MarketConnectionPromise
  extends Promise<MarketConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<MarketEdge>>() => T;
  aggregate: <T = AggregateMarket>() => T;
}

export interface MarketConnectionSubscription
  extends Promise<AsyncIterator<MarketConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MarketEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMarketSubscription>() => T;
}

export interface StallEdge {
  cursor: String;
}

export interface StallEdgePromise extends Promise<StallEdge>, Fragmentable {
  node: <T = Stall>() => T;
  cursor: () => Promise<String>;
}

export interface StallEdgeSubscription
  extends Promise<AsyncIterator<StallEdge>>,
    Fragmentable {
  node: <T = StallSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Market {
  id: ID_Output;
  name: String;
}

export interface MarketPromise extends Promise<Market>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  province: <T = Province>() => T;
  stalls: <T = FragmentableArray<Stall>>(
    args?: {
      where?: StallWhereInput;
      orderBy?: StallOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface MarketSubscription
  extends Promise<AsyncIterator<Market>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  province: <T = ProvinceSubscription>() => T;
  stalls: <T = Promise<AsyncIterator<StallSubscription>>>(
    args?: {
      where?: StallWhereInput;
      orderBy?: StallOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateProvince {
  count: Int;
}

export interface AggregateProvincePromise
  extends Promise<AggregateProvince>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProvinceSubscription
  extends Promise<AsyncIterator<AggregateProvince>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MarketSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MarketSubscriptionPayloadPromise
  extends Promise<MarketSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Market>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MarketPreviousValues>() => T;
}

export interface MarketSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MarketSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MarketSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MarketPreviousValuesSubscription>() => T;
}

export interface ProvinceConnection {}

export interface ProvinceConnectionPromise
  extends Promise<ProvinceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ProvinceEdge>>() => T;
  aggregate: <T = AggregateProvince>() => T;
}

export interface ProvinceConnectionSubscription
  extends Promise<AsyncIterator<ProvinceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProvinceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProvinceSubscription>() => T;
}

export interface MarketPreviousValues {
  id: ID_Output;
  name: String;
}

export interface MarketPreviousValuesPromise
  extends Promise<MarketPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface MarketPreviousValuesSubscription
  extends Promise<AsyncIterator<MarketPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isPublished: Boolean;
  title: String;
  content: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = User>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Post>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValues>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface AggregateStall {
  count: Int;
}

export interface AggregateStallPromise
  extends Promise<AggregateStall>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStallSubscription
  extends Promise<AsyncIterator<AggregateStall>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProvinceEdge {
  cursor: String;
}

export interface ProvinceEdgePromise
  extends Promise<ProvinceEdge>,
    Fragmentable {
  node: <T = Province>() => T;
  cursor: () => Promise<String>;
}

export interface ProvinceEdgeSubscription
  extends Promise<AsyncIterator<ProvinceEdge>>,
    Fragmentable {
  node: <T = ProvinceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProvincePreviousValues {
  id: ID_Output;
  name: String;
}

export interface ProvincePreviousValuesPromise
  extends Promise<ProvincePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ProvincePreviousValuesSubscription
  extends Promise<AsyncIterator<ProvincePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ProvinceSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ProvinceSubscriptionPayloadPromise
  extends Promise<ProvinceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Province>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProvincePreviousValues>() => T;
}

export interface ProvinceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProvinceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProvinceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProvincePreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  stall: <T = Stall>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  stall: <T = StallSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isPublished: Boolean;
  title: String;
  content: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface Province {
  id: ID_Output;
  name: String;
}

export interface ProvincePromise extends Promise<Province>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  markets: <T = FragmentableArray<Market>>(
    args?: {
      where?: MarketWhereInput;
      orderBy?: MarketOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProvinceSubscription
  extends Promise<AsyncIterator<Province>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  markets: <T = Promise<AsyncIterator<MarketSubscription>>>(
    args?: {
      where?: MarketWhereInput;
      orderBy?: MarketOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface StallConnection {}

export interface StallConnectionPromise
  extends Promise<StallConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<StallEdge>>() => T;
  aggregate: <T = AggregateStall>() => T;
}

export interface StallConnectionSubscription
  extends Promise<AsyncIterator<StallConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StallEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStallSubscription>() => T;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
